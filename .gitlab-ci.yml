stages:
  - build
  - test
  - quality
  - publish
  - deploy
  - deploy-prod
  - tag

default:
  image: registry.gitlab.com/antoinecampbell/docker-images/build

unit-test:
  stage: test
  script:
    - cd node-functions
    - yarn install
    - yarn test
  artifacts:
    reports:
      junit:
        - node-functions/build/junit.xml
  cache:
    key: node-unit-test
    policy: pull-push
    paths:
      - node-functions/node_modules/
      - node-functions/build/

build:
  stage: build
  script:
    - cd node-functions
    - yarn build-zip
  artifacts:
    expire_in: 7 days
    paths:
      - node-functions/lambda.zip
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - node-functions/node_modules/

version:
  stage: build
  script:
    - date +"%Y%m%d%H%M-$CI_COMMIT_SHORT_SHA" > version
    - cat version
  artifacts:
    expire_in: 30 days
    paths:
      - version

sonar:
  stage: quality
  dependencies:
    - unit-test
  script:
    - cd node-functions
    - yarn install
    - yarn sonar
  cache:
    key: node-unit-test
    policy: pull
    paths:
      - node-functions/node_modules/
      - node-functions/build/

integration-test-&-performance-test:
  stage: test
  dependencies:
    - build
  environment:
    name: test
  variables:
    TF_VAR_environment: ${CI_COMMIT_SHORT_SHA}
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - export GRADLE_USER_HOME=`pwd`/integration-tests/.gradle
  script:
    - cd $CI_PROJECT_DIR/terraform/resources
    - terraform init
    - terraform apply -auto-approve
    - export TABLE_NAME=$(terraform output -raw notes_table_name)
    - export BASE_URI=$(terraform output -raw notes_endpoint)
    - export URL=$(terraform output -raw notes_endpoint)
    - cd $CI_PROJECT_DIR
    - ./gradlew integration-tests:test
    - cd $CI_PROJECT_DIR/terraform/resources
    - k6 run --iterations 50 --summary-export performance.json index.js
  after_script:
    - cd $CI_PROJECT_DIR/performance-tests
    - terraform destroy -auto-approve
  artifacts:
    when: always
    expire_in: 7 days
    name: terraform-state
    paths:
      - terraform/resources/terraform.tfstate
      - performance-tests/performance.json
    reports:
      junit:
        - integration-tests/build/test-results/test/**/TEST-*.xml
      load_performance: performance-tests/performance.json
  cache:
    key: integration-test
    policy: pull-push
    paths:
      - terraform/resources/.terraform
      - integration-tests/.gradle

publish:
  stage: publish
  before_script:
    - export VERSION=$(cat version)
    - export REGISTRY_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven
  script:
    - ./gradlew publish -Pversion=$VERSION -PciDeployRepo=$REGISTRY_URL -PciJobToken=${CI_JOB_TOKEN}

.deploy: &deploy_env
  dependencies:
    - version
    - publish
  variables:
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_ENVIRONMENT_NAME}
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
    TF_VAR_environment: ${CI_ENVIRONMENT_NAME}
    TF_VAR_zip_path: ../lambda.zip
  before_script:
    - export VERSION=$(cat version)
    - export TF_VAR_app_version=$VERSION
    - export ARTIFACT_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven/com/captech/serverless/node-functions/$VERSION/node-functions-$VERSION.zip
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  script:
    - 'wget --header "Job-Token: $CI_JOB_TOKEN" -O lambda.zip $ARTIFACT_URL'
    - cd terraform
    - terraform init
    - terraform plan -out=plan.tfplan
    - terraform show --json plan.tfplan | convert_report > tfplan.json
    - terraform apply plan.tfplan
  after_script:
    - cd terraform
    - terraform output -raw notes_endpoint > ../notes_endpoint
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - terraform/.terraform
  artifacts:
    paths:
      - notes_endpoint
    reports:
      terraform: terraform/tfplan.json

deploy-feature:
  stage: deploy
  when: manual
  except:
    refs:
      - master
  environment:
    name: dev
  <<: *deploy_env

deploy-dev:
  stage: deploy
  only:
    refs:
      - master
  environment:
    name: dev
  <<: *deploy_env

deploy-qa:
  stage: deploy
  when: manual
  only:
    refs:
      - master
  environment:
    name: qa
  <<: *deploy_env

deploy-prod:
  stage: deploy-prod
  when: manual
  only:
    refs:
      - master
  environment:
    name: prod
  <<: *deploy_env

#performace-tests:
#  stage: quality
#  only:
#    refs:
#      - master
#  dependencies:
#    - integration-test
#  before_script:
#    - cd $CI_PROJECT_DIR/terraform/resources
#    - export URL=$(cat notes_endpoint)
#  script:
#    - cd performance-tests
#    - k6 run --iterations 50 --summary-export performance.json index.js
#  after_script:
#    - cd $CI_PROJECT_DIR/terraform/resources
#    - terraform destroy -auto-approve
#  artifacts:
#    reports:
#      load_performance: performance-tests/performance.json
#  cache:
#    key: integration-test
#    policy: pull
#    paths:
#      - terraform/resources/.terraform
#      - integration-tests/.gradle

#tag:
#  stage: tag
#  dependencies:
#    - version
#    - deploy-prod
#  before_script:
#    - export VERSION=$(cat version)
#  script:
#    - git --version
#    - git remote remove origin
#    - git remote add origin https://oauth2:${GIT_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
#    - git config user.email gitlab-ci.ci
#    - git config user.name gitlab-ci
#    - git tag -a $VERSION -m "Release $VERSION"
#    - git push --follow-tags