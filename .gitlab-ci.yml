stages:
  - build
  - integration-test
  - version
  - publish
  - deploy-dev
  - deploy-prod

default:
  image: registry.gitlab.com/antoinecampbell/docker-images/build

unit-test:
  stage: build
  script:
    - cd node-functions
    - yarn install
    - yarn test
    - yarn sonar
  artifacts:
    reports:
      junit:
        - node-functions/build/junit.xml
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - node-functions/node_modules/

build:
  stage: build
  script:
    - cd node-functions
    - yarn build-zip
  artifacts:
    expire_in: 7 days
    paths:
      - node-functions/lambda.zip
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - node-functions/node_modules/

version:
  stage: build
  script:
    - date +"%Y%m%d%H%M-$CI_COMMIT_SHORT_SHA" > version
    - cat version
  artifacts:
    paths:
      - version

integration-test:
  stage: integration-test
  dependencies:
    - build
  environment:
    name: test
  variables:
    TF_VAR_environment: ${CI_COMMIT_SHORT_SHA}
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - export GRADLE_USER_HOME=`pwd`/integration-tests/.gradle
  script:
    - cd $CI_PROJECT_DIR/terraform/resources
    - terraform init
    - terraform apply -auto-approve
    - export TABLE_NAME=$(terraform output -raw notes_table_name)
    - export BASE_URI=$(terraform output -raw api_url)
    - cd $CI_PROJECT_DIR
    - ./gradlew integration-tests:test
  after_script:
    - cd $CI_PROJECT_DIR/terraform/resources
    - terraform destroy -auto-approve
  artifacts:
    when: always
    expire_in: 7 days
    name: terraform-state
    paths:
      - terraform/resources/terraform.tfstate
    reports:
      junit:
        - integration-tests/build/test-results/test/**/TEST-*.xml
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - terraform/resources/.terraform
      - integration-tests/.gradle

publish:
  stage: publish
  before_script:
    - export VERSION=$(cat version)
    - export REGISTRY_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven
  script:
    - ./gradlew publish -Pversion=$VERSION -PciDeployRepo=$REGISTRY_URL -PciJobToken=${CI_JOB_TOKEN}

deploy-dev:
  stage: deploy-dev
  environment:
    name: dev
  dependencies:
    - version
    - publish
  variables:
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_ENVIRONMENT_NAME}
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
    TF_VAR_environment: ${CI_ENVIRONMENT_NAME}
    TF_VAR_zip_path: ../lambda.zip
  before_script:
    - export VERSION=$(cat version)
    - export ARTIFACT_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/maven/com/captech/serverless/node-functions/$VERSION/node-functions-$VERSION.zip
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  script:
    - 'wget --header "Job-Token: $CI_JOB_TOKEN" -O lambda.zip $ARTIFACT_URL'
    - cd terraform
    - terraform init
    - terraform plan -out=dev.tfplan
    - terraform show --json dev.tfplan | convert_report > tfplan.json
    - terraform apply dev.tfplan
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - terraform/.terraform
  artifacts:
    reports:
      terraform: terraform/tfplan.json

deploy-prod:
  stage: deploy-prod
  when: manual
  only:
    refs:
      - master
  environment:
    name: prod
  dependencies:
    - build
    - deploy-dev
  variables:
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_ENVIRONMENT_NAME}
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
    TF_VAR_environment: ${CI_ENVIRONMENT_NAME}
  before_script:
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  script:
    - cd terraform
    - terraform init
    - terraform plan -out=prod.tfplan
    - terraform show --json prod.tfplan | convert_report > tfplan.json
    - terraform apply prod.tfplan
  cache:
    key: ${CI_JOB_NAME}
    policy: pull-push
    paths:
      - terraform/.terraform
  artifacts:
    reports:
      terraform: terraform/tfplan.json